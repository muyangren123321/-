# def homogeneous_blocks(max_x, max_y, w, l, c):
#     # 初始化F矩阵和B矩阵
#     F = [[0 for _ in range(max_y + 1)] for _ in range(max_x + 1)]
#     B = [[0 for _ in range(max_y + 1)] for _ in range(max_x + 1)]
#     # 初始化N矩阵
#     N = [[[] for _ in range(max_y + 1)] for _ in range(max_x + 1)]
#     # 循环计算F矩阵、B矩阵和N矩阵
#     for i in range(len(w)):
#         for x in range(w[i], max_x + 1):
#             for y in range(l[i], max_y + 1):
#                 temp1 = F[x][y - l[i]] + int(x / w[i])
#                 temp2 = F[x - l[i]][y] + int(y / w[i])
#                 if temp1 > temp2:
#                     F[x][y] = temp1
#                     N[x][y] = N[x][y - l[i]] + [(i, int(x / w[i]))]
#                 else:
#                     F[x][y] = temp2
#                     N[x][y] = N[x - l[i]][y] + [(i, int(y / w[i]))]
#                 B[x][y] = max(B[x][y], F[x][y] * c[i])
#     # 返回B矩阵的最大值和B矩阵
#     max_B = max([max(row) for row in B])
#     return max_B, B
#
#
# L = 20
# H = 15
# w = [2, 3, 5]
# l = [4, 6, 10]
# c = [5, 7, 11]
#
# V = 0
# for x in range(L + 1):
#     for y in range(H + 1):
#         V1, _ = homogeneous_blocks(x, H, w, l, c)
#         V2, _ = homogeneous_blocks(L - x, H, w, l, c)
#         V3 = 0
#         if x < L and y < H:
#             V3, _ = homogeneous_blocks(L - x, H - y, w, l, c)
#         V = max(V, V1 + V2 + V3)
#
# print(f"排样方式的最大价值为：{V}")


def homogeneous_blocks(max_x, max_y, w, l, c):
    # 初始化F矩阵和B矩阵
    F = [[0 for _ in range(max_y + 1)] for _ in range(max_x + 1)]
    B = [[0 for _ in range(max_y + 1)] for _ in range(max_x + 1)]
    # 初始化N矩阵
    N = [[[] for _ in range(max_y + 1)] for _ in range(max_x + 1)]
    # 循环计算F矩阵、B矩阵和N矩阵
    for i in range(len(w)):
        for x in range(w[i], max_x + 1):
            for y in range(l[i], max_y + 1):
                temp1 = F[x][y - l[i]] + int(x / w[i])
                temp2 = F[x - l[i]][y] + int(y / w[i])
                if temp1 > temp2:
                    F[x][y] = temp1
                    N[x][y] = N[x][y - l[i]] + [(i, int(x / w[i]))]
                else:
                    F[x][y] = temp2
                    N[x][y] = N[x - l[i]][y] + [(i, int(y / w[i]))]
                B[x][y] = max(B[x][y], F[x][y] * c[i])
    # 返回B矩阵的最大值、B矩阵和使用的毛坯编号和数量
    max_B = max([max(row) for row in B])
    return max_B, B, N


# 修改后的主函数
L = 20
H = 15
w = [2, 3, 5]
l = [4, 6, 10]
c = [5, 7, 11]

# 统计每种毛坯使用的数量
count = [0] * len(w)

V = 0
for x in range(L + 1):
    for y in range(H + 1):
        count = [0] * len(w)  # 清空 count 数组的值
        V1, _, N1 = homogeneous_blocks(x, H, w, l, c)
        V2, _, N2 = homogeneous_blocks(L - x, H, w, l, c)
        if x < L and y < H:
            V3, _, N3 = homogeneous_blocks(L - x, H - y, w, l, c)
            # 检查 N3[L-x] 是否包含足够的元素
            if len(N3[L - x]) > H - y:
                # 统计每种毛坯使用的数量
                for n in N3[L - x][H - y]:
                    count[n[0]] += n[1]
                # 更新最大价值
                V = max(V, V1 + V2 + V3)
        else:
            V = max(V, V1 + V2)
            for n in N1[x][H]:
                count[n[0]] += n[1]
            for n in N2[L - x][H]:
                count[n[0]] += n[1]
for i in range(len(w)):
    print(f"第{i + 1}种毛坯使用了{count[i]}")
